@{
    ViewData["Title"] = "Live RSS Feeds";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="text-center mb-4">
                <h1 class="display-4 fw-bold text-primary mb-3">
                    <i class="fas fa-rss me-3"></i>
                    <span data-translate="liveFeeds">Live RSS Feeds</span>
                </h1>
                <p class="lead text-muted" data-translate="feedsDescription">
                    Real-time updates from official emergency services and fire departments
                </p>
            </div>
        </div>
    </div>

    <div class="row g-4">
        <!-- Left Column: 112 Greece Feed -->
        <div class="col-lg-6">
            <div class="card feed-card h-100 shadow-lg">
                <div class="card-header bg-danger text-white d-flex align-items-center">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    <h4 class="mb-0 fw-bold" data-translate="112greece">112 Greece</h4>
                </div>
                <div class="card-body p-0">
                    <div class="feed-container">
                        <div class="feed-header p-3">
                            <div class="d-flex justify-content-between align-items-center">
                                <small class="text-muted">
                                    <i class="fas fa-link me-1"></i>
                                    https://x.com/112Greece
                                </small>
                            </div>
                        </div>
                        <div class="feed-content" id="feed-112greece">
                            <div class="text-center p-4">
                                <div class="spinner-border text-danger" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                                <p class="mt-3 text-muted">Loading emergency alerts...</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Right Column: Pyrosvestiki Feed -->
        <div class="col-lg-6">
            <div class="card feed-card h-100 shadow-lg">
                <div class="card-header bg-warning text-dark d-flex align-items-center">
                    <i class="fas fa-fire me-2"></i>
                    <h4 class="mb-0 fw-bold" data-translate="pyrosvestiki">Πυροσβεστικό Σώμα</h4>
                </div>
                <div class="card-body p-0">
                    <div class="feed-container">
                        <div class="feed-header p-3">
                            <div class="d-flex justify-content-between align-items-center">
                                <small class="text-muted">
                                    <i class="fas fa-link me-1"></i>
                                    https://x.com/pyrosvestiki
                                </small>
                            </div>
                        </div>
                        <div class="feed-content" id="feed-pyrosvestiki">
                            <div class="text-center p-4">
                                <div class="spinner-border text-warning" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                                <p class="mt-3 text-muted">Loading fire service updates...</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Refresh Controls -->
    <div class="row mt-4">
        <div class="col-12 text-center">
            <button id="refreshFeeds" class="btn btn-primary btn-lg me-3">
                <i class="fas fa-sync-alt me-2"></i>
                <span data-translate="refreshFeeds">Refresh Feeds</span>
            </button>
            <button id="autoRefreshToggle" class="btn btn-outline-secondary btn-lg">
                <i class="fas fa-clock me-2"></i>
                <span data-translate="autoRefresh">Auto Refresh: ON</span>
            </button>
        </div>
    </div>

    <!-- Last Updated Info -->
    <div class="row mt-3">
        <div class="col-12 text-center">
            <small class="text-muted">
                <i class="fas fa-clock me-1"></i>
                <span data-translate="lastUpdated">Last updated:</span>
                <span id="lastUpdatedTime">--</span>
            </small>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let autoRefreshInterval;
        let autoRefreshEnabled = true;
        
        // RSS Feed URLs
        const feedUrls = {
            '112greece': 'https://feeds.livefireincidents.gr/112greece/rss',
            'pyrosvestiki': 'https://feeds.livefireincidents.gr/pyrosvestiki/rss'
        };
        
        // Load RSS feed using a CORS proxy
        async function loadRSSFeed(feedKey, containerId) {
            try {
                // Use server-side RSS proxy to fetch the RSS feed
                const proxyUrl = '/Home/RSSProxy?url=';
                const response = await fetch(proxyUrl + encodeURIComponent(feedUrls[feedKey]));
                
                if (response.ok) {
                    const xmlText = await response.text();
                    const parser = new DOMParser();
                    const xmlDoc = parser.parseFromString(xmlText, 'text/xml');
                    const items = xmlDoc.querySelectorAll('item');
                    
                    if (items.length > 0) {
                        const feedItems = Array.from(items).slice(0, 10).map(item => {
                            let title = item.querySelector('title')?.textContent || 'No title';
                            let description = item.querySelector('description')?.textContent || 'No description';
                            const link = item.querySelector('link')?.textContent || '#';
                            const pubDate = item.querySelector('pubDate')?.textContent || new Date().toISOString();
                            
                            // Filter out 'Image' text from title and description
                            if (title === 'Image' || title.trim() === 'Image') {
                                title = description !== 'No description' ? description : 'Emergency Alert';
                                description = 'No description';
                            }
                            
                            return { title, description, link, pubDate };
                        });
                        
                        displayFeedItems(feedItems, containerId, feedKey);
                    } else {
                        displayFeedError(containerId, 'No items found in feed');
                    }
                } else {
                    displayFeedError(containerId, `Failed to fetch feed (${response.status})`);
                }
            } catch (error) {
                console.error(`Error loading ${feedKey} feed:`, error);
                displayFeedError(containerId, 'Failed to load feed');
            }
        }
        
        // Display feed items
        function displayFeedItems(items, containerId, feedKey) {
            const container = document.getElementById(containerId);
            const isEmergency = feedKey === '112greece';
            
            // Twitter-like profile info
            const profileInfo = isEmergency ? {
                username: '112Greece',
                handle: '@@112Greece',
                avatar: '/images/profiles/112greece.png',
                verified: true
            } : {
                username: 'Πυροσβεστικό Σώμα',
                handle: '@@pyrosvestiki',
                avatar: '/images/profiles/pyrosvestiki.png',
                verified: true
            };
            
            // Function to replace numbers with emoji
            function replaceNumbersWithEmoji(text) {
                return text.replace(/1⃣/g, '1️⃣')
                        .replace(/2⃣/g, '2️⃣')
                        .replace(/3⃣/g, '3️⃣')
                        .replace(/4⃣/g, '4️⃣')
                        .replace(/5⃣/g, '5️⃣')
                        .replace(/6⃣/g, '6️⃣')
                        .replace(/7⃣/g, '7️⃣')
                        .replace(/8⃣/g, '8️⃣')
                        .replace(/9⃣/g, '9️⃣')
                        .replace(/0⃣/g, '0️⃣');
            }

            let html = '<div class="tweet-feed">';
            
            items.forEach((item, index) => {
                const pubDate = new Date(item.pubDate);
                const timeAgo = getTimeAgo(pubDate);

                // replace letters with emoji when needed
                let description = item.description && item.description !== 'No description available' && item.description !== 'No description' 
                                ? replaceNumbersWithEmoji(item.description) 
                                : (item.title && item.title !== 'Image' && item.title.trim() !== 'Image' 
                                    ? replaceNumbersWithEmoji(item.title) 
                                    : '');

                html += `
                    <div class="tweet-item">
                        <div class="tweet-header">
                            <div class="tweet-avatar">
                                <img src="${profileInfo.avatar}" alt="${profileInfo.username}" class="avatar-img">
                            </div>
                            <div class="tweet-user-info">
                                <div class="tweet-username">
                                    <span class="display-name">${profileInfo.username}</span>
                                    ${profileInfo.verified ? '<i class="fas fa-check-circle verified-badge"></i>' : ''}
                                    <span class="handle">${profileInfo.handle}</span>
                                    <span class="tweet-time">· ${timeAgo}</span>
                                </div>
                            </div>
                        </div>
                        <div class="tweet-content">
                            ${description}
                        </div>
                    </div>
                `;
            });
            
            html += '</div>';
            container.innerHTML = html;
        }

        
        // Display feed error
        function displayFeedError(containerId, message) {
            const container = document.getElementById(containerId);
            container.innerHTML = `
                <div class="text-center p-4">
                    <i class="fas fa-exclamation-triangle text-warning mb-3" style="font-size: 2rem;"></i>
                    <h5 class="text-muted">Feed Unavailable</h5>
                    <p class="text-muted">${message}</p>
                    <button class="btn btn-outline-primary btn-sm" onclick="loadAllFeeds()">
                        <i class="fas fa-retry me-1"></i>
                        Try Again
                    </button>
                </div>
            `;
        }
        
        // Get time ago string
        function getTimeAgo(date) {
            const now = new Date();
            const diffMs = now - date;
            const diffMins = Math.floor(diffMs / 60000);
            const diffHours = Math.floor(diffMins / 60);
            const diffDays = Math.floor(diffHours / 24);
            
            if (diffMins < 1) return 'Just now';
            if (diffMins < 60) return `${diffMins}m ago`;
            if (diffHours < 24) return `${diffHours}h ago`;
            return `${diffDays}d ago`;
        }
        
        // Load all feeds
        function loadAllFeeds() {
            loadRSSFeed('112greece', 'feed-112greece');
            loadRSSFeed('pyrosvestiki', 'feed-pyrosvestiki');
            document.getElementById('lastUpdatedTime').textContent = new Date().toLocaleString();
        }
        
        // Toggle auto refresh
        function toggleAutoRefresh() {
            const button = document.getElementById('autoRefreshToggle');
            const span = button.querySelector('span');
            
            if (autoRefreshEnabled) {
                clearInterval(autoRefreshInterval);
                autoRefreshEnabled = false;
                span.textContent = 'Auto Refresh: OFF';
                button.classList.remove('btn-outline-secondary');
                button.classList.add('btn-outline-danger');
            } else {
                startAutoRefresh();
                autoRefreshEnabled = true;
                span.textContent = 'Auto Refresh: ON';
                button.classList.remove('btn-outline-danger');
                button.classList.add('btn-outline-secondary');
            }
        }
        
        // Start auto refresh
        function startAutoRefresh() {
            autoRefreshInterval = setInterval(loadAllFeeds, 300000); // 5 minutes
        }
        
        // Event listeners
        document.getElementById('refreshFeeds').addEventListener('click', loadAllFeeds);
        document.getElementById('autoRefreshToggle').addEventListener('click', toggleAutoRefresh);
        
        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            loadAllFeeds();
            startAutoRefresh();
        });
    </script>
}

<style>
    .feed-card {
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        border: none;
    }
    
    .feed-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 25px rgba(0,0,0,0.15) !important;
    }
    
    .feed-content {
        max-height: 600px;
        overflow-y: auto;
    }
    
    .feed-item {
        transition: all 0.3s ease;
    }
    
    .feed-item:hover {
        transform: translateX(5px);
        box-shadow: 0 5px 15px rgba(0,0,0,0.1) !important;
    }
    
    .tweet-feed {
        padding: 0;
    }
    
    .spinner-border {
        width: 3rem;
        height: 3rem;
    }
    
    @@media (max-width: 768px) {
        .display-4 {
            font-size: 2rem;
        }
        
        .feed-content {
            max-height: 400px;
        }
        
        .btn-lg {
            padding: 0.5rem 1rem;
            font-size: 1rem;
        }
    }
    
    /* Twitter-like feed styling */
    .tweet-feed {
        padding: 0;
    }
    
    /* emoji support - allow Unicode emoji but prevent ASCII numbers from becoming emoji */
    .tweet-feed * {
        font-variant-emoji: unicode;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }
    
    /* Ensure proper emoji rendering for all tweet content */
    .tweet-item, .tweet-content, .tweet-text, .tweet-description {
        font-synthesis: none;
        text-decoration-skip-ink: auto;
    }
    
    .tweet-item {
        background-color: var(--card-bg);
        color: var(--text-color);
        border-bottom: 1px solid var(--card-border);
        padding: 12px 16px;
        transition: background-color 0.2s ease;
        cursor: pointer;
    }
    
    .tweet-item:hover {
        background-color: rgba(0, 0, 0, 0.03);
    }
    
    .tweet-header {
        display: flex;
        align-items: flex-start;
        margin-bottom: 4px;
    }
    
    .tweet-avatar {
        margin-right: 12px;
        flex-shrink: 0;
    }
    
    .avatar-img {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
    }
    
    .tweet-user-info {
        flex: 1;
        min-width: 0;
    }
    
    .tweet-username {
        display: flex;
        align-items: center;
        flex-wrap: wrap;
        line-height: 1.3;
    }
    
    .display-name {
        font-weight: 700;
        font-size: 15px;
        color: var(--text-color);
        margin-right: 4px;
    }
    
    .verified-badge {
        color: #1d9bf0;
        font-size: 14px;
        margin-right: 4px;
    }
    
    .handle {
        color: #657786;
        font-size: 15px;
        margin-right: 4px;
    }
    
    .tweet-time {
        color: #657786;
        font-size: 15px;
    }
    
    .tweet-content {
        margin-left: 52px;
        margin-bottom: 12px;
        font-family: 'Segoe UI', 'Apple Color Emoji', 'Segoe UI Emoji', 'Noto Color Emoji', 'Segoe UI Symbol', Tahoma, Geneva, Verdana, sans-serif;
        text-rendering: optimizeLegibility;
        -webkit-font-feature-settings: "liga", "kern";
        font-feature-settings: "liga", "kern";
        unicode-bidi: embed;
        direction: ltr;
    }
    
    .tweet-text {
        font-size: 15px;
        line-height: 1.3125;
        color: var(--text-color);
        margin-bottom: 8px;
        word-wrap: break-word;
        font-family: 'Segoe UI', 'Apple Color Emoji', 'Segoe UI Emoji', 'Noto Color Emoji', 'Segoe UI Symbol', Tahoma, Geneva, Verdana, sans-serif;
        text-rendering: optimizeLegibility;
        -webkit-font-feature-settings: "liga", "kern";
        font-feature-settings: "liga", "kern";
    }
    
    .tweet-description {
        font-size: 15px;
        color: var(--text-color);
        font-weight: 600;
        line-height: 1.3125;
        margin-top: 4px;
        font-family: 'Segoe UI', 'Apple Color Emoji', 'Segoe UI Emoji', 'Noto Color Emoji', 'Segoe UI Symbol', Tahoma, Geneva, Verdana, sans-serif;
        text-rendering: optimizeLegibility;
        -webkit-font-feature-settings: "liga", "kern";
        font-feature-settings: "liga", "kern";
    }
    
    .tweet-actions {
        display: flex;
        justify-content: space-between;
        max-width: 425px;
        margin-left: 52px;
        margin-top: 12px;
    }
    
    .tweet-action {
        display: flex;
        align-items: center;
        color: #657786;
        font-size: 13px;
        cursor: pointer;
        padding: 8px;
        border-radius: 50%;
        transition: all 0.2s ease;
        min-width: 32px;
        justify-content: center;
    }
    
    .tweet-action:hover {
        background-color: rgba(29, 155, 240, 0.1);
        color: #1d9bf0;
    }
    
    .tweet-action i {
        font-size: 16px;
    }
    
    .external-link {
        color: inherit;
        text-decoration: none;
    }
    
    .external-link:hover {
        color: inherit;
    }
    
    .action-count {
        margin-left: 4px;
        font-size: 13px;
    }
    
    .feed-header {
        background-color: var(--card-header-bg) !important;
        color: var(--text-color);
    }
    
    .card-footer {
        background-color: var(--card-header-bg) !important;
        color: var(--text-color);
    }
    
    /* Card header styling */
     .card-header {
         border-bottom: 1px solid var(--card-border);
     }
     
     /* Dark theme specific overrides */
     [data-theme="dark"] .tweet-item {
         background-color: var(--card-bg);
         color: #ffffff;
         border-bottom-color: rgba(255, 255, 255, 0.125);
     }
     
     [data-theme="dark"] .tweet-item:hover {
         background-color: rgba(255, 255, 255, 0.05);
     }
     
     [data-theme="dark"] .display-name {
         color: #e1e8ed;
         font-weight: 700;
     }
     
     [data-theme="dark"] .tweet-text {
         color: #e1e8ed;
     }
     
     [data-theme="dark"] .handle,
     [data-theme="dark"] .tweet-time {
         color: #8b949e;
     }
     
     [data-theme="dark"] .tweet-description {
         color: #ffffff;
         font-weight: 600;
     }
     
     [data-theme="dark"] .tweet-action {
         color: #8b949e;
     }
     
     [data-theme="dark"] .tweet-action:hover {
         background-color: rgba(29, 155, 240, 0.1);
         color: #1d9bf0;
     }
     
     [data-theme="dark"] .tweet-feed {
         background-color: transparent;
     }
     
     [data-theme="dark"] .feed-content {
         background-color: var(--card-bg);
         border-radius: 8px;
     }
     
     [data-theme="dark"] .card-header.bg-danger {
         background-color: #dc3545 !important;
         color: #ffffff !important;
     }
     
     [data-theme="dark"] .card-header.bg-warning {
         background-color: #ffc107 !important;
         color: #000000 !important;
     }
     
     [data-theme="dark"] .card-footer {
         background-color: #1a1a1a !important;
         border-top-color: #444 !important;
         color: #8b949e !important;
     }
     
     [data-theme="dark"] .card-footer small {
         color: #8b949e !important;
     }
     
     [data-theme="dark"] .text-muted {
         color: #8b949e !important;
     }
     
     [data-theme="dark"] .badge.bg-warning {
         background-color: #ffc107 !important;
         color: #000000 !important;
     }
     
     [data-theme="dark"] .badge.bg-danger {
         background-color: #dc3545 !important;
         color: #ffffff !important;
     }
     
     /* Responsive design for mobile */
      @@media (max-width: 768px) {
         .tweet-content {
             margin-left: 48px;
         }
         
         .tweet-actions {
             margin-left: 48px;
         }
         
         .avatar-img {
             width: 36px;
             height: 36px;
         }
         
         .tweet-avatar {
             margin-right: 8px;
         }
     }
</style>